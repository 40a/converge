// Code generated by protoc-gen-go.
// source: root.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	root.proto

It has these top-level messages:
	LoadRequest
	ContentResponse
	StatusResponse
	DiffResponse
	GraphComponent
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// the stage from which this status response is being sent
type StatusResponse_Stage int32

const (
	StatusResponse_UNSPECIFIED_STAGE StatusResponse_Stage = 0
	StatusResponse_PLAN              StatusResponse_Stage = 1
	StatusResponse_APPLY             StatusResponse_Stage = 2
)

var StatusResponse_Stage_name = map[int32]string{
	0: "UNSPECIFIED_STAGE",
	1: "PLAN",
	2: "APPLY",
}
var StatusResponse_Stage_value = map[string]int32{
	"UNSPECIFIED_STAGE": 0,
	"PLAN":              1,
	"APPLY":             2,
}

func (x StatusResponse_Stage) String() string {
	return proto.EnumName(StatusResponse_Stage_name, int32(x))
}
func (StatusResponse_Stage) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

// when is this status response being sent?
type StatusResponse_Run int32

const (
	StatusResponse_UNSPECIFIED_RUN StatusResponse_Run = 0
	StatusResponse_STARTED         StatusResponse_Run = 1
	StatusResponse_FINISHED        StatusResponse_Run = 2
)

var StatusResponse_Run_name = map[int32]string{
	0: "UNSPECIFIED_RUN",
	1: "STARTED",
	2: "FINISHED",
}
var StatusResponse_Run_value = map[string]int32{
	"UNSPECIFIED_RUN": 0,
	"STARTED":         1,
	"FINISHED":        2,
}

func (x StatusResponse_Run) String() string {
	return proto.EnumName(StatusResponse_Run_name, int32(x))
}
func (StatusResponse_Run) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 1} }

type LoadRequest struct {
	Location   string            `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	Parameters map[string]string `protobuf:"bytes,2,rep,name=parameters" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *LoadRequest) Reset()                    { *m = LoadRequest{} }
func (m *LoadRequest) String() string            { return proto.CompactTextString(m) }
func (*LoadRequest) ProtoMessage()               {}
func (*LoadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LoadRequest) GetParameters() map[string]string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type ContentResponse struct {
	Content string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
}

func (m *ContentResponse) Reset()                    { *m = ContentResponse{} }
func (m *ContentResponse) String() string            { return proto.CompactTextString(m) }
func (*ContentResponse) ProtoMessage()               {}
func (*ContentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type StatusResponse struct {
	Id      string                  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Stage   StatusResponse_Stage    `protobuf:"varint,2,opt,name=stage,enum=pb.StatusResponse_Stage" json:"stage,omitempty"`
	Run     StatusResponse_Run      `protobuf:"varint,3,opt,name=run,enum=pb.StatusResponse_Run" json:"run,omitempty"`
	Details *StatusResponse_Details `protobuf:"bytes,4,opt,name=details" json:"details,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StatusResponse) GetDetails() *StatusResponse_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

// the informational message, if present
type StatusResponse_Details struct {
	Messages   []string                 `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
	Changes    map[string]*DiffResponse `protobuf:"bytes,2,rep,name=changes" json:"changes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	HasChanges bool                     `protobuf:"varint,3,opt,name=hasChanges" json:"hasChanges,omitempty"`
	Error      string                   `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
}

func (m *StatusResponse_Details) Reset()                    { *m = StatusResponse_Details{} }
func (m *StatusResponse_Details) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse_Details) ProtoMessage()               {}
func (*StatusResponse_Details) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func (m *StatusResponse_Details) GetChanges() map[string]*DiffResponse {
	if m != nil {
		return m.Changes
	}
	return nil
}

type DiffResponse struct {
	Original string `protobuf:"bytes,1,opt,name=original" json:"original,omitempty"`
	Current  string `protobuf:"bytes,2,opt,name=current" json:"current,omitempty"`
	Changes  bool   `protobuf:"varint,3,opt,name=changes" json:"changes,omitempty"`
}

func (m *DiffResponse) Reset()                    { *m = DiffResponse{} }
func (m *DiffResponse) String() string            { return proto.CompactTextString(m) }
func (*DiffResponse) ProtoMessage()               {}
func (*DiffResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type GraphComponent struct {
	// Types that are valid to be assigned to Component:
	//	*GraphComponent_Vertex_
	//	*GraphComponent_Edge_
	Component isGraphComponent_Component `protobuf_oneof:"component"`
}

func (m *GraphComponent) Reset()                    { *m = GraphComponent{} }
func (m *GraphComponent) String() string            { return proto.CompactTextString(m) }
func (*GraphComponent) ProtoMessage()               {}
func (*GraphComponent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type isGraphComponent_Component interface {
	isGraphComponent_Component()
}

type GraphComponent_Vertex_ struct {
	Vertex *GraphComponent_Vertex `protobuf:"bytes,1,opt,name=vertex,oneof"`
}
type GraphComponent_Edge_ struct {
	Edge *GraphComponent_Edge `protobuf:"bytes,2,opt,name=edge,oneof"`
}

func (*GraphComponent_Vertex_) isGraphComponent_Component() {}
func (*GraphComponent_Edge_) isGraphComponent_Component()   {}

func (m *GraphComponent) GetComponent() isGraphComponent_Component {
	if m != nil {
		return m.Component
	}
	return nil
}

func (m *GraphComponent) GetVertex() *GraphComponent_Vertex {
	if x, ok := m.GetComponent().(*GraphComponent_Vertex_); ok {
		return x.Vertex
	}
	return nil
}

func (m *GraphComponent) GetEdge() *GraphComponent_Edge {
	if x, ok := m.GetComponent().(*GraphComponent_Edge_); ok {
		return x.Edge
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GraphComponent) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GraphComponent_OneofMarshaler, _GraphComponent_OneofUnmarshaler, _GraphComponent_OneofSizer, []interface{}{
		(*GraphComponent_Vertex_)(nil),
		(*GraphComponent_Edge_)(nil),
	}
}

func _GraphComponent_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GraphComponent)
	// component
	switch x := m.Component.(type) {
	case *GraphComponent_Vertex_:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Vertex); err != nil {
			return err
		}
	case *GraphComponent_Edge_:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Edge); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GraphComponent.Component has unexpected type %T", x)
	}
	return nil
}

func _GraphComponent_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GraphComponent)
	switch tag {
	case 1: // component.vertex
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GraphComponent_Vertex)
		err := b.DecodeMessage(msg)
		m.Component = &GraphComponent_Vertex_{msg}
		return true, err
	case 2: // component.edge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GraphComponent_Edge)
		err := b.DecodeMessage(msg)
		m.Component = &GraphComponent_Edge_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GraphComponent_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GraphComponent)
	// component
	switch x := m.Component.(type) {
	case *GraphComponent_Vertex_:
		s := proto.Size(x.Vertex)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphComponent_Edge_:
		s := proto.Size(x.Edge)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GraphComponent_Vertex struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GraphComponent_Vertex) Reset()                    { *m = GraphComponent_Vertex{} }
func (m *GraphComponent_Vertex) String() string            { return proto.CompactTextString(m) }
func (*GraphComponent_Vertex) ProtoMessage()               {}
func (*GraphComponent_Vertex) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

type GraphComponent_Edge struct {
	Source     string   `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Dest       string   `protobuf:"bytes,2,opt,name=dest" json:"dest,omitempty"`
	Attributes []string `protobuf:"bytes,3,rep,name=attributes" json:"attributes,omitempty"`
}

func (m *GraphComponent_Edge) Reset()                    { *m = GraphComponent_Edge{} }
func (m *GraphComponent_Edge) String() string            { return proto.CompactTextString(m) }
func (*GraphComponent_Edge) ProtoMessage()               {}
func (*GraphComponent_Edge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 1} }

func init() {
	proto.RegisterType((*LoadRequest)(nil), "pb.LoadRequest")
	proto.RegisterType((*ContentResponse)(nil), "pb.ContentResponse")
	proto.RegisterType((*StatusResponse)(nil), "pb.StatusResponse")
	proto.RegisterType((*StatusResponse_Details)(nil), "pb.StatusResponse.Details")
	proto.RegisterType((*DiffResponse)(nil), "pb.DiffResponse")
	proto.RegisterType((*GraphComponent)(nil), "pb.GraphComponent")
	proto.RegisterType((*GraphComponent_Vertex)(nil), "pb.GraphComponent.Vertex")
	proto.RegisterType((*GraphComponent_Edge)(nil), "pb.GraphComponent.Edge")
	proto.RegisterEnum("pb.StatusResponse_Stage", StatusResponse_Stage_name, StatusResponse_Stage_value)
	proto.RegisterEnum("pb.StatusResponse_Run", StatusResponse_Run_name, StatusResponse_Run_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Executor service

type ExecutorClient interface {
	// Plan out the execution of a module given by the location
	Plan(ctx context.Context, in *LoadRequest, opts ...grpc.CallOption) (Executor_PlanClient, error)
	// Apply a module given by the location
	Apply(ctx context.Context, in *LoadRequest, opts ...grpc.CallOption) (Executor_ApplyClient, error)
}

type executorClient struct {
	cc *grpc.ClientConn
}

func NewExecutorClient(cc *grpc.ClientConn) ExecutorClient {
	return &executorClient{cc}
}

func (c *executorClient) Plan(ctx context.Context, in *LoadRequest, opts ...grpc.CallOption) (Executor_PlanClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Executor_serviceDesc.Streams[0], c.cc, "/pb.Executor/Plan", opts...)
	if err != nil {
		return nil, err
	}
	x := &executorPlanClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Executor_PlanClient interface {
	Recv() (*StatusResponse, error)
	grpc.ClientStream
}

type executorPlanClient struct {
	grpc.ClientStream
}

func (x *executorPlanClient) Recv() (*StatusResponse, error) {
	m := new(StatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *executorClient) Apply(ctx context.Context, in *LoadRequest, opts ...grpc.CallOption) (Executor_ApplyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Executor_serviceDesc.Streams[1], c.cc, "/pb.Executor/Apply", opts...)
	if err != nil {
		return nil, err
	}
	x := &executorApplyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Executor_ApplyClient interface {
	Recv() (*StatusResponse, error)
	grpc.ClientStream
}

type executorApplyClient struct {
	grpc.ClientStream
}

func (x *executorApplyClient) Recv() (*StatusResponse, error) {
	m := new(StatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Executor service

type ExecutorServer interface {
	// Plan out the execution of a module given by the location
	Plan(*LoadRequest, Executor_PlanServer) error
	// Apply a module given by the location
	Apply(*LoadRequest, Executor_ApplyServer) error
}

func RegisterExecutorServer(s *grpc.Server, srv ExecutorServer) {
	s.RegisterService(&_Executor_serviceDesc, srv)
}

func _Executor_Plan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LoadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExecutorServer).Plan(m, &executorPlanServer{stream})
}

type Executor_PlanServer interface {
	Send(*StatusResponse) error
	grpc.ServerStream
}

type executorPlanServer struct {
	grpc.ServerStream
}

func (x *executorPlanServer) Send(m *StatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Executor_Apply_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LoadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExecutorServer).Apply(m, &executorApplyServer{stream})
}

type Executor_ApplyServer interface {
	Send(*StatusResponse) error
	grpc.ServerStream
}

type executorApplyServer struct {
	grpc.ServerStream
}

func (x *executorApplyServer) Send(m *StatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Executor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Executor",
	HandlerType: (*ExecutorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Plan",
			Handler:       _Executor_Plan_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Apply",
			Handler:       _Executor_Apply_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

// Client API for ResourceHost service

type ResourceHostClient interface {
	// GetBinary returns the converge binary itself
	GetBinary(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*ContentResponse, error)
	// GetModule gets the content of a module at the given path
	GetModule(ctx context.Context, in *LoadRequest, opts ...grpc.CallOption) (*ContentResponse, error)
}

type resourceHostClient struct {
	cc *grpc.ClientConn
}

func NewResourceHostClient(cc *grpc.ClientConn) ResourceHostClient {
	return &resourceHostClient{cc}
}

func (c *resourceHostClient) GetBinary(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*ContentResponse, error) {
	out := new(ContentResponse)
	err := grpc.Invoke(ctx, "/pb.ResourceHost/GetBinary", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceHostClient) GetModule(ctx context.Context, in *LoadRequest, opts ...grpc.CallOption) (*ContentResponse, error) {
	out := new(ContentResponse)
	err := grpc.Invoke(ctx, "/pb.ResourceHost/GetModule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ResourceHost service

type ResourceHostServer interface {
	// GetBinary returns the converge binary itself
	GetBinary(context.Context, *google_protobuf1.Empty) (*ContentResponse, error)
	// GetModule gets the content of a module at the given path
	GetModule(context.Context, *LoadRequest) (*ContentResponse, error)
}

func RegisterResourceHostServer(s *grpc.Server, srv ResourceHostServer) {
	s.RegisterService(&_ResourceHost_serviceDesc, srv)
}

func _ResourceHost_GetBinary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceHostServer).GetBinary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ResourceHost/GetBinary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceHostServer).GetBinary(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceHost_GetModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceHostServer).GetModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ResourceHost/GetModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceHostServer).GetModule(ctx, req.(*LoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResourceHost_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ResourceHost",
	HandlerType: (*ResourceHostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBinary",
			Handler:    _ResourceHost_GetBinary_Handler,
		},
		{
			MethodName: "GetModule",
			Handler:    _ResourceHost_GetModule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

// Client API for Grapher service

type GrapherClient interface {
	Graph(ctx context.Context, in *LoadRequest, opts ...grpc.CallOption) (Grapher_GraphClient, error)
}

type grapherClient struct {
	cc *grpc.ClientConn
}

func NewGrapherClient(cc *grpc.ClientConn) GrapherClient {
	return &grapherClient{cc}
}

func (c *grapherClient) Graph(ctx context.Context, in *LoadRequest, opts ...grpc.CallOption) (Grapher_GraphClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Grapher_serviceDesc.Streams[0], c.cc, "/pb.Grapher/Graph", opts...)
	if err != nil {
		return nil, err
	}
	x := &grapherGraphClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Grapher_GraphClient interface {
	Recv() (*GraphComponent, error)
	grpc.ClientStream
}

type grapherGraphClient struct {
	grpc.ClientStream
}

func (x *grapherGraphClient) Recv() (*GraphComponent, error) {
	m := new(GraphComponent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Grapher service

type GrapherServer interface {
	Graph(*LoadRequest, Grapher_GraphServer) error
}

func RegisterGrapherServer(s *grpc.Server, srv GrapherServer) {
	s.RegisterService(&_Grapher_serviceDesc, srv)
}

func _Grapher_Graph_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LoadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrapherServer).Graph(m, &grapherGraphServer{stream})
}

type Grapher_GraphServer interface {
	Send(*GraphComponent) error
	grpc.ServerStream
}

type grapherGraphServer struct {
	grpc.ServerStream
}

func (x *grapherGraphServer) Send(m *GraphComponent) error {
	return x.ServerStream.SendMsg(m)
}

var _Grapher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Grapher",
	HandlerType: (*GrapherServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Graph",
			Handler:       _Grapher_Graph_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("root.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 820 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x54, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xae, 0x9d, 0xa4, 0x49, 0x4e, 0xaa, 0x36, 0xcc, 0xee, 0x16, 0xaf, 0x41, 0x6c, 0xe4, 0x0b,
	0xb6, 0x14, 0xe1, 0x40, 0x0a, 0x12, 0x5a, 0x69, 0x85, 0xb2, 0x8d, 0xb7, 0xad, 0x54, 0xa2, 0x68,
	0xd2, 0x45, 0x02, 0x24, 0xd0, 0x24, 0x99, 0xba, 0x16, 0xce, 0x8c, 0x99, 0x19, 0x57, 0x8d, 0x10,
	0x37, 0xdc, 0x72, 0xc9, 0x53, 0x20, 0xf1, 0x2c, 0xdc, 0xf0, 0x0a, 0x5c, 0x22, 0xf1, 0x0a, 0x68,
	0x66, 0xec, 0xca, 0x4d, 0x53, 0x89, 0xbb, 0xf9, 0xe6, 0x7c, 0xe7, 0x3b, 0xbf, 0x3a, 0x00, 0x82,
	0x73, 0x15, 0x66, 0x82, 0x2b, 0x8e, 0xdc, 0x6c, 0xe6, 0xbf, 0x1b, 0x73, 0x1e, 0xa7, 0xb4, 0x4f,
	0xb2, 0xa4, 0x4f, 0x18, 0xe3, 0x8a, 0xa8, 0x84, 0x33, 0x69, 0x19, 0xfe, 0x3b, 0x85, 0xd5, 0xa0,
	0x59, 0x7e, 0xd9, 0xa7, 0xcb, 0x4c, 0xad, 0xac, 0x31, 0xf8, 0xdd, 0x81, 0xce, 0x39, 0x27, 0x0b,
	0x4c, 0x7f, 0xcc, 0xa9, 0x54, 0xc8, 0x87, 0x56, 0xca, 0xe7, 0xc6, 0xdf, 0x73, 0x7a, 0xce, 0x41,
	0x1b, 0xdf, 0x62, 0xf4, 0x05, 0x40, 0x46, 0x04, 0x59, 0x52, 0x45, 0x85, 0xf4, 0xdc, 0x5e, 0xed,
	0xa0, 0x33, 0x78, 0x16, 0x66, 0xb3, 0xb0, 0x22, 0x10, 0x4e, 0x6e, 0x19, 0x11, 0x53, 0x62, 0x85,
	0x2b, 0x2e, 0xfe, 0x4b, 0xd8, 0x5b, 0x33, 0xa3, 0x2e, 0xd4, 0x7e, 0xa0, 0xab, 0x22, 0x94, 0x7e,
	0xa2, 0xc7, 0xd0, 0xb8, 0x26, 0x69, 0x4e, 0x3d, 0xd7, 0xfc, 0x59, 0xf0, 0xc2, 0xfd, 0xdc, 0x09,
	0x3e, 0x84, 0xbd, 0x63, 0xce, 0x14, 0x65, 0x0a, 0x53, 0x99, 0x71, 0x26, 0x29, 0xf2, 0xa0, 0x39,
	0xb7, 0x5f, 0x85, 0x44, 0x09, 0x83, 0x5f, 0xeb, 0xb0, 0x3b, 0x55, 0x44, 0xe5, 0xf2, 0x96, 0xbc,
	0x0b, 0x6e, 0xb2, 0x28, 0x78, 0x6e, 0xb2, 0x40, 0x21, 0x34, 0xa4, 0x22, 0xb1, 0x8d, 0xb4, 0x3b,
	0xf0, 0x74, 0x29, 0x77, 0x5d, 0x34, 0x8c, 0x29, 0xb6, 0x34, 0x74, 0x00, 0x35, 0x91, 0x33, 0xaf,
	0x66, 0xd8, 0xfb, 0x1b, 0xd8, 0x38, 0x67, 0x58, 0x53, 0xd0, 0xa7, 0xd0, 0x5c, 0x50, 0x45, 0x92,
	0x54, 0x7a, 0xf5, 0x9e, 0x73, 0xd0, 0x19, 0xf8, 0x1b, 0xd8, 0x23, 0xcb, 0xc0, 0x25, 0xd5, 0xff,
	0xc7, 0x81, 0x66, 0xf1, 0xa9, 0xe7, 0xb0, 0xa4, 0x52, 0x92, 0x98, 0x4a, 0xcf, 0xe9, 0xd5, 0xf4,
	0x1c, 0x4a, 0x8c, 0x86, 0xd0, 0x9c, 0x5f, 0x11, 0xa6, 0x4d, 0x76, 0x08, 0xcf, 0x1f, 0x56, 0x0f,
	0x8f, 0x2d, 0xd3, 0x0e, 0xa3, 0xf4, 0x43, 0xef, 0x01, 0x5c, 0x11, 0x59, 0xd8, 0x4c, 0x45, 0x2d,
	0x5c, 0xf9, 0xd1, 0x43, 0xa0, 0x42, 0x70, 0x61, 0xd2, 0x6f, 0x63, 0x0b, 0xfc, 0x73, 0xd8, 0xa9,
	0xca, 0x6d, 0x18, 0xde, 0xfb, 0xd5, 0xe1, 0x75, 0x06, 0x5d, 0x9d, 0xd8, 0x28, 0xb9, 0xbc, 0x2c,
	0xd3, 0xaa, 0x8e, 0xf3, 0x08, 0x1a, 0xa6, 0xbd, 0xe8, 0x09, 0xbc, 0xf5, 0x66, 0x3c, 0x9d, 0x44,
	0xc7, 0x67, 0xaf, 0xcf, 0xa2, 0xd1, 0xf7, 0xd3, 0x8b, 0xe1, 0x49, 0xd4, 0xdd, 0x42, 0x2d, 0xa8,
	0x4f, 0xce, 0x87, 0xe3, 0xae, 0x83, 0xda, 0xd0, 0x18, 0x4e, 0x26, 0xe7, 0x5f, 0x77, 0xdd, 0xe0,
	0x33, 0xa8, 0xe1, 0x9c, 0xa1, 0x47, 0xb0, 0x57, 0x75, 0xc1, 0x6f, 0xc6, 0xdd, 0x2d, 0xd4, 0x81,
	0xe6, 0xf4, 0x62, 0x88, 0x2f, 0xa2, 0x51, 0xd7, 0x41, 0x3b, 0xd0, 0x7a, 0x7d, 0x36, 0x3e, 0x9b,
	0x9e, 0x46, 0xa3, 0xae, 0x1b, 0x7c, 0x07, 0x3b, 0xd5, 0x34, 0x74, 0x7b, 0xb9, 0x48, 0xe2, 0x84,
	0x91, 0xb4, 0x5c, 0xf3, 0x12, 0x9b, 0x9d, 0xca, 0x85, 0xd0, 0x3b, 0xe5, 0x16, 0x3b, 0x65, 0xa1,
	0xb1, 0xdc, 0x69, 0x59, 0x09, 0x83, 0x7f, 0x1d, 0xd8, 0x3d, 0x11, 0x24, 0xbb, 0x3a, 0xe6, 0xcb,
	0x8c, 0x33, 0x4d, 0x3e, 0x82, 0xed, 0x6b, 0x2a, 0x14, 0xbd, 0x31, 0x01, 0x3a, 0x83, 0xa7, 0xba,
	0x17, 0x77, 0x39, 0xe1, 0x57, 0x86, 0x70, 0xba, 0x85, 0x0b, 0x2a, 0xfa, 0x08, 0xea, 0x74, 0x11,
	0x97, 0xed, 0x7b, 0x7b, 0x83, 0x4b, 0xb4, 0x88, 0xe9, 0xe9, 0x16, 0x36, 0x34, 0xdf, 0x83, 0x6d,
	0x2b, 0xb1, 0xbe, 0xdb, 0x3e, 0x86, 0xba, 0x66, 0xa2, 0x7d, 0xd8, 0x96, 0x3c, 0x17, 0x73, 0x5a,
	0xd8, 0x0a, 0x84, 0x10, 0xd4, 0x17, 0x54, 0x96, 0x15, 0x9a, 0xb7, 0x5e, 0x0a, 0xa2, 0x94, 0x48,
	0x66, 0xb9, 0x32, 0x15, 0xea, 0xad, 0xab, 0xfc, 0xbc, 0xea, 0x40, 0x7b, 0x5e, 0xe6, 0x31, 0xf8,
	0xc3, 0x81, 0x56, 0x74, 0x43, 0xe7, 0xb9, 0xe2, 0x02, 0x8d, 0xa1, 0x3e, 0x49, 0x09, 0x43, 0x7b,
	0x6b, 0xd7, 0xc0, 0x47, 0xf7, 0x37, 0x33, 0x78, 0xf6, 0xcb, 0x5f, 0x7f, 0xff, 0xe6, 0x3e, 0x0d,
	0x1e, 0x9b, 0x7b, 0x75, 0xfd, 0x49, 0x7f, 0x49, 0xe6, 0x57, 0x09, 0xa3, 0xfd, 0x2c, 0x25, 0xec,
	0x85, 0x73, 0xf8, 0xb1, 0x83, 0x26, 0xd0, 0x18, 0x66, 0x59, 0xba, 0xfa, 0x7f, 0x82, 0x3d, 0x23,
	0xe8, 0x07, 0x4f, 0xd6, 0x05, 0x89, 0xd6, 0x30, 0x8a, 0x83, 0x3f, 0x1d, 0xd8, 0xc1, 0xd4, 0x16,
	0x7f, 0xca, 0xa5, 0x42, 0xdf, 0x40, 0xfb, 0x84, 0xaa, 0x57, 0x09, 0x23, 0x62, 0x85, 0xf6, 0x43,
	0x7b, 0x23, 0xc3, 0xf2, 0x46, 0x86, 0x91, 0xbe, 0x91, 0xfe, 0x23, 0x1d, 0x6d, 0xed, 0xe6, 0x94,
	0xe1, 0x90, 0x57, 0x86, 0x13, 0x85, 0xae, 0xec, 0xcf, 0xac, 0xdc, 0xcc, 0x68, 0x7f, 0xc9, 0x17,
	0x79, 0x4a, 0xef, 0x97, 0xb0, 0x51, 0xb4, 0x6f, 0x44, 0x3f, 0x40, 0xcf, 0xef, 0x8b, 0x2e, 0x8d,
	0x8e, 0xec, 0xff, 0x54, 0x1e, 0xe2, 0x97, 0x87, 0x87, 0x3f, 0x0f, 0xbe, 0x85, 0xa6, 0xd9, 0x0c,
	0x2a, 0x74, 0xb7, 0xcc, 0xf3, 0x81, 0x6e, 0xdd, 0x5d, 0xa0, 0x87, 0xbb, 0x15, 0x6b, 0x9e, 0xe9,
	0xd6, 0x6c, 0xdb, 0xf4, 0xe1, 0xe8, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xad, 0x7e, 0xec, 0xdc,
	0x69, 0x06, 0x00, 0x00,
}
