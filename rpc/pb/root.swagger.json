{
  "swagger": "2.0",
  "info": {
    "title": "root.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/machine/apply": {
      "post": {
        "summary": "Apply a module given by the location",
        "operationId": "Apply",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "$ref": "#/definitions/pbStatusResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbLoadRequest"
            }
          }
        ],
        "tags": [
          "Executor"
        ]
      }
    },
    "/api/v1/machine/graph": {
      "post": {
        "operationId": "Graph",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "$ref": "#/definitions/pbGraphComponent"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbLoadRequest"
            }
          }
        ],
        "tags": [
          "Grapher"
        ]
      }
    },
    "/api/v1/machine/plan": {
      "post": {
        "summary": "Plan out the execution of a module given by the location",
        "operationId": "Plan",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "$ref": "#/definitions/pbStatusResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbLoadRequest"
            }
          }
        ],
        "tags": [
          "Executor"
        ]
      }
    },
    "/api/v1/resources/binary": {
      "get": {
        "summary": "GetBinary returns the converge binary itself",
        "operationId": "GetBinary",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/pbContentResponse"
            }
          }
        },
        "tags": [
          "ResourceHost"
        ]
      }
    },
    "/api/v1/resources/modules/{location}": {
      "get": {
        "summary": "GetModule gets the content of a module at the given path",
        "operationId": "GetModule",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/pbContentResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "location",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "string"
          }
        ],
        "tags": [
          "ResourceHost"
        ]
      }
    }
  },
  "definitions": {
    "GraphComponentEdge": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "string"
          }
        },
        "dest": {
          "type": "string",
          "format": "string"
        },
        "source": {
          "type": "string",
          "format": "string"
        }
      }
    },
    "GraphComponentVertex": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/protobufAny"
        },
        "id": {
          "type": "string",
          "format": "string"
        },
        "kind": {
          "type": "string",
          "format": "string"
        }
      }
    },
    "StatusResponseDetails": {
      "type": "object",
      "properties": {
        "changes": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/pbDiffResponse"
          }
        },
        "error": {
          "type": "string",
          "format": "string"
        },
        "hasChanges": {
          "type": "boolean",
          "format": "boolean"
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "string"
          }
        }
      },
      "title": "the informational message, if present"
    },
    "StatusResponseRun": {
      "type": "string",
      "enum": [
        "UNSPECIFIED_RUN",
        "STARTED",
        "FINISHED"
      ],
      "default": "UNSPECIFIED_RUN",
      "title": "when is this status response being sent?"
    },
    "StatusResponseStage": {
      "type": "string",
      "enum": [
        "UNSPECIFIED_STAGE",
        "PLAN",
        "APPLY"
      ],
      "default": "UNSPECIFIED_STAGE",
      "title": "the stage from which this status response is being sent"
    },
    "pbContentResponse": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "format": "string"
        }
      }
    },
    "pbDiffResponse": {
      "type": "object",
      "properties": {
        "changes": {
          "type": "boolean",
          "format": "boolean"
        },
        "current": {
          "type": "string",
          "format": "string"
        },
        "original": {
          "type": "string",
          "format": "string"
        }
      }
    },
    "pbGraphComponent": {
      "type": "object",
      "properties": {
        "edge": {
          "$ref": "#/definitions/GraphComponentEdge"
        },
        "vertex": {
          "$ref": "#/definitions/GraphComponentVertex"
        }
      }
    },
    "pbLoadRequest": {
      "type": "object",
      "properties": {
        "location": {
          "type": "string",
          "format": "string"
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "string"
          }
        }
      }
    },
    "pbStatusResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/StatusResponseDetails"
        },
        "id": {
          "type": "string",
          "format": "string"
        },
        "run": {
          "$ref": "#/definitions/StatusResponseRun"
        },
        "stage": {
          "$ref": "#/definitions/StatusResponseStage"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "format": "string",
          "description": "A URL/resource name whose content describes the type of the\nserialized protocol buffer message.\n\nFor URLs which use the scheme `http`, `https`, or no scheme, the\nfollowing restrictions and interpretations apply:\n\n* If no scheme is provided, `https` is assumed.\n* The last segment of the URL's path must represent the fully\n  qualified name of the type (as in `path/google.protobuf.Duration`).\n  The name should be in a canonical form (e.g., leading \".\" is\n  not accepted).\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "protobufEmpty": {
      "type": "object",
      "description": "service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
      "title": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:"
    }
  }
}
